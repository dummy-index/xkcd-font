"""
This script gives us reproducible builds of the fonts themselves, so that we don't recreate the font unnecessarily.

"""
import datetime
import os
import shutil
import calendar

import fontforge


base = '../font/'
sfd = os.path.join(base, 'xkcd-script.sfd')
newsfd = os.path.join(base, 'new-xkcd-script.sfd')
ttf = os.path.join(base, 'xkcd-script.ttf')
woff = os.path.join(base, 'xkcd-script.woff')

then_utc = datetime.datetime(2000, 1, 1, 0, 0)
then_str = 'Sat Jan 1 00:00:00 2000'
then_unix = calendar.timegm(then_utc.timetuple())

if True:
    content = []
    with open(sfd, 'rb') as fh_in:
        for line in fh_in:
            try:
                line = line.decode('utf-8')
            except UnicodeDecodeError:
                content.append(line)
                continue

            if line.startswith('%%CreationDate'):
                line = '%%CreationDate: ' + then_str + '\n'

            if line.startswith('CreationTime:'):
                line = 'CreationTime: ' + str(then_unix) + '\n'

            if line.startswith('ModificationTime:'):
                line = 'ModificationTime: ' + str(then_unix) + '\n'

            if 'Created with FontForge (http://fontforge.org)' in line:
                if line.startswith('UComments:'):
                    line = 'UComments: "Created with FontForge (http://fontforge.org)"\n'
                else:
                    line = '% Created with FontForge (http://fontforge.org)\n'

            if 'Generated by FontForge' in line:
                continue

            content.append(line.encode('utf-8'))

    with open(newsfd, 'wb') as fh_out:
        for line in content:
            fh_out.write(line)

os.remove(sfd)
shutil.move(newsfd, sfd)

os.utime(sfd, (then_unix, then_unix))

font = fontforge.open(sfd)

# Fontforge includes the date of building the font if we don't specify a TTF uniqueid,
# which makes the font non-reproducible.
font.sfnt_names = (('English (US)', 'UniqueID', 'xkcd Script'), )
font.xuid = "-1"

font.generate(woff)
font.generate(ttf)
